1. Что такое Continuous Integration и какие проблемы он помогает решить?

CI — практика частой интеграции кода в общий репозиторий, с автоматической сборкой и тестированием. Решает проблемы:

Конфликты интеграции.
Позднее выявление ошибок.
Сложности развертывания.
Замедление разработки.
Низкое качество кода.

2. Что такое GitHub Actions и для чего они используются?

GitHub Actions — платформа автоматизации от GitHub. Используется для:

Автоматизации CI/CD.
Автоматизации задач (линтеры, тесты, деплой).
Интеграции с сервисами.
Создания своих workflow.

3. Какой процесс выполнения рабочего потока GitHub Actions?

Процесс:

Событие: (триггер)
Runner: (выбор окружения)
Jobs: (выполнение заданий)
Steps: (выполнение шагов)
Сборка/Развертывание (артефактов/сайтов)
Отслеживание

4. Чем отличаются команды npm run test и npm run lint?

npm run test — запускает юнит-тесты (и интеграционные).
npm run lint — запускает линтер, для проверки стиля кода.

5. Какова роль файла .yml в настройке рабочих потоков CI?

Файл .yml — описывает конфигурацию workflow: триггер, окружение, задания, шаги.

6. Что такое Pull Request и какая его роль в процессе разработки?

Pull Request (PR) — запрос на слияние кода из ветки в другую. Роль:

Проверка кода (code review).
Обсуждение изменений.
Контроль качества.

7. Почему важно автоматизировать процесс тестирования и линтинга в проектах?

Важно для:

Экономии времени.
Раннего выявления ошибок.
Улучшения качества кода.
Снижения ручной работы.
Ускорения итераций.

1. Что такое Continuous Delivery и какие его преимущества?

Continuous Delivery (CD) - автоматизация подготовки кода к релизу. Преимущества: быстрые, надежные релизы, снижение рисков, ускорение разработки, улучшение качества.

2. Каковы основные этапы процесса развертывания на GitHub Pages с использованием GitHub Actions?

Этапы: 1. Триггер, 2. Окружение, 3. Checkout, 4. Node.js, 5. Зависимости, 6. Сборка, 7. Деплой на GitHub Pages, 8. Отслеживание.

3. Чем отличается Continuous Integration от Continuous Delivery?

CI - автоматическая интеграция и тестирование кода. CD - автоматизация подготовки к релизу, после прохождения CI.

4. Почему автоматическое развертывание может быть полезным при разработке проектов?

Автоматическое развертывание: ускоряет релизы, снижает ошибки, экономит время разработчиков, увеличивает стабильность.

5. Как GitHub Pages помогает в процессе непрерывной доставки?

GitHub Pages - простой хостинг для статических сайтов, идеально подходит для автоматического развертывания из GitHub Actions.

1. Что такое семантическое версионирование и каковы его основные принципы?

Семантическое версионирование (SemVer) — система назначения версий ПО, основанная на трёх числах: MAJOR.MINOR.PATCH. Принципы: * MAJOR — несовместимые изменения API. * MINOR — добавление новых возможностей, обратно совместимых. * PATCH — исправление ошибок, обратно совместимые.

2. Какие основные типы релизов определяются в SemVer?

Основные типы релизов: * Major релиз (MAJOR) * Minor релиз (MINOR) * Patch релиз (PATCH)

3. Что такое “semantic-release” и как он работает?

semantic-release — инструмент для автоматизации управления версиями и публикации релизов на основе сообщений коммитов. Работает, анализируя коммиты и определяя тип релиза (Major, Minor, Patch).

4. Какова роль сообщений коммитов в автоматическом версионировании?

Сообщения коммитов определяют тип релиза (major, minor, patch) при автоматическом версионировании. semantic-release анализирует эти сообщения.

5. Что такое Conventional Commits и каковы его основные правила?

Conventional Commits — конвенция для стандартизации сообщений коммитов. Основные правила:

Формат: <type>(<scope>)?: <subject>.
type: feat, fix, docs, style, refactor, test, chore.
subject: краткое описание изменения.
BREAKING CHANGE: в footer для major-релиза.